# -*- coding: utf-8 -*-
"""MKD cleaner for volunteer csv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    REDACTED
"""

#Import Packages
import pandas as pd
import numpy as np
import re

#Set Up OAUTH
!pip install -U -q PyDrive

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from google.colab import files
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

#Import Data
file1 = drive.CreateFile({'id': REDACTED})

file1.GetContentFile('patients.csv')
df = pd.read_csv('patients.csv')
list(df)



## Prepare a data set for DataJam Data Drive

## Clean times
df['Timestamp of first call'] = pd.to_datetime(df['Timestamp of first call'], format = '%Y-%m-%d %H:%M:%S')
df['Timestamp of last call'] = pd.to_datetime(df['Timestamp of last call'], format = '%Y-%m-%d %H:%M:%S')
df['Initial Call Date']=pd.to_datetime(\
                                       df['Initial Call Date'],
                                      errors = 'coerce',
                                      infer_datetime_format=True
                                     )
df['procedure_dt'] = pd.to_datetime(\
                                      df['Procedure date'],
                                         errors = 'coerce',
                                         infer_datetime_format=True)
df['Pledge generated time'] = pd.to_datetime(\
                                      df['Pledge generated time'],
                                         errors = 'coerce',
                                         infer_datetime_format=True)
df['Appointment Date'] = pd.to_datetime(\
                                     df['Appointment Date'],
                                     errors = 'coerce',
                                      infer_datetime_format=True
                                     )

## Info for first call

def to_just_a_month(datetime):
  return datetime.month
def to_just_a_year(datetime):
  return datetime.year
def true_to_1(boolean):
  if boolean:
    return 1
  else:
    return 0

df['first_call_month_E'] = df['Timestamp of first call'].apply(to_just_a_month)
df['first_call_year_E'] = df['Timestamp of first call'].apply(to_just_a_year)


## Durations since initial call

df['Days to first call'] = df['Timestamp of first call'] - df['Initial Call Date']
df['Days to last call'] = df['Timestamp of last call'] - df['Initial Call Date']
df['Days to appointment'] = df['Appointment Date'] - df['Initial Call Date']
df['Days to pledge'] = df['Pledge generated time'] - df['Initial Call Date']


def to_days_rounded(timedelta):
  if timedelta.seconds//3600 % 24 >= 12:
    return timedelta.days + 1
  else:
    return timedelta.days

  
df['days_to_last_call_E'] = df['Days to last call'].apply(to_days_rounded)
df['days_to_first_call_E'] = df['Days to first call'].apply(to_days_rounded)
df['days_to_appointment_E'] = df['Days to appointment'].apply(to_days_rounded)
df['days_to_appointment_E'] = df['Days to pledge'].apply(to_days_rounded)

## Specify weekday/weekend

def to_weekday_weekend(datetime):
  if datetime.weekday() < 5:
    return 'weekday'
  elif datetime.weekday() >= 5: 
    return 'weekend'
  
df['initial_call_weekday_weekend_E'] = df['Initial Call Date'].apply(to_weekday_weekend)
df['first_call_weekday_weekend_E'] = df['Timestamp of first call'].apply(to_weekday_weekend)
df['appointment_call_weekday_weekend_E'] = df['Appointment Date'].apply(to_weekday_weekend)

## Cap LMP/Gestation, procedure cost, household size

def cap_at_20(weeks):
  return min(weeks,20)

def cap_at_5000(cost):
  return min(cost,5000)

def cap_at_8(family_size):
  return min(family_size,8)
def clean_states_dcaf(state):
  state=str(state)
  state=state.upper()
  state=state.strip()
  if state == "MARYLAND":
    state = "MD"
  elif state == "DISTRICT OF COLUMBIA":
    state = "DC"
  elif state == "D.C.":
    state = "DC"
  elif state == "VIRGINIA":
    state = "VA"
  elif state == "GEORGIA":
    state = "GA"
  elif state == "M":
    state = "MD"
  elif state == "BEACH":
    state = "VA"
  elif state == "NORTH CAROLINA":
    state = "NC"
  elif state == "TENNESSEE":
    state = "TN"
  elif state == "MDMD":
    state = "MD"
  elif state == "DELAWARE":
    state = "DE"
  elif state == "V":
    state = "VA"
  elif state == "20010":
    state = "DC"
  elif state == "WDC" or state == "DDC":
    state = "DC"
  elif state == "22031":
    state = "DC"
  elif state == "20002":
    state = "DC"
  elif state == "ARKANSAS":
    state = "AR"
  elif state == "IOWA":
    state = "IA"
  elif state == "DE / MD":
    state = "DE"
  return state      

df['state_E'] = df['State'].apply(clean_states_dcaf)

df['gestation_at_procedure_E'] = df['Gestation at procedure in weeks'].apply(cap_at_20)
df['last_menstrual_period_at_intake_E'] = df['LMP at intake (weeks)'].apply(cap_at_20)
df['abortion_cost_E'] = df['Abortion cost'].apply(cap_at_5000)
df['Household Size'] = df['Minors in Household'] + df['Adults in Household']
df['household_size_E'] = df['Household Size'].apply(cap_at_8)


def clean_language(language):
  if (language != "English") & (language != "Spanish"):
    language = "Other"
  return language

df['language_E'] = df['Language'].apply(clean_language)

df['clinic_E'] = df['Clinic'].astype('category').cat.codes

df['fulfilled_E'] = df['Predicted Fulfilled']
df['fulfilled_amount_E'] = df['Predicted Amount']


def to_max_income(income):
  if type(income) == str:
    income = income.strip()
    income = income.replace("$","")
  if income == "Under 9,999":
    income = 10000
  elif income == "10,000-14,999":
    income = 15000
  elif income == "15,000-19,999":
    income = 20000
  elif income == "20,000-24,999":
    income = 25000
  elif income == "25,000-29,999":
    income = 30000
  elif income == "30,000-34,999":
    income = 35000
  elif income == "35,000-39,999":
    income = 40000
  elif income == "40,000-44,999":
    income = 45000
  elif income == "45,000-49,999":
    income = 50000
  elif income == "50,000-54,999":
    income = 55000
  elif income == "55,000-59,999":
    income = 60000
  elif income == "50,000-59,999":
    income = 60000
  elif income == "60,000-74,999":
    income = 75000
  elif income == "75,000 or more":
    income == 99999
  elif income == "9,999 (less than 192/week)":
    income = 10000
  elif income == "75,000 or more/year":
    income == 99999
  elif income == "30,000-34,999 (577-672/week)":
    income = 35000
  elif income == "35,000-39,000 (673-768/week)":
    income = 40000
  elif income == "35,000-39,000":
    income = 40000
  elif income == "Under 9,999 (less than 192/week)":
    income = 10000
  return income
df['max_income_E'] = df['Income'].apply(to_max_income)

print(df['max_income_E'].value_counts())

df['Has Alt Contact?'].value_counts()
df['Voicemail Preference'].value_counts()
df['Line'].value_counts()
df['language_E'].value_counts()
df['Age'].value_counts()
df['Referred By'].value_counts()
df['Clinic'].value_counts()
df['Insurance'].value_counts()
df['Income'].value_counts()
df.columns

df2 = df[['Archived?','Has Alt Contact?','Voicemail Preference','Line','Race or Ethnicity','Employment Status','Referred By',
 'Referred to clinic by fund',
 'Resolved without fund assistance',
 'Call count',
 'Patient contribution',
 'NAF pledge',
 'Fund pledge',
 'first_call_month_E',
 'first_call_year_E',
 'days_to_last_call_E',
 'days_to_first_call_E',
 'days_to_appointment_E',
 'initial_call_weekday_weekend_E',
 'first_call_weekday_weekend_E',
 'appointment_call_weekday_weekend_E',
 'state_E',
 'gestation_at_procedure_E',
 'last_menstrual_period_at_intake_E',
 'abortion_cost_E',
 'household_size_E',
 'language_E',
 'clinic_E',
 'fulfilled_E',
 'fulfilled_amount_E',
 'max_income_E']]
for column in df2.columns:
  print(df[column].value_counts())

# Export the bad boy
from googleapiclient.discovery import build
drive_service = build('drive', 'v3')
from googleapiclient.http import MediaFileUpload

df2.to_csv('dcaf_data_team.csv')

file_metadata = {
  'name': 'DCAF CSV DataKind Clean',
  'mimeType': 'text/csv'
}
media = MediaFileUpload('dcaf_data_team.csv', 
                        mimetype='text/csv',
                        resumable=True)
created = drive_service.files().create(body=file_metadata,
                                       media_body=media,
                                       fields='id').execute()
print('File ID: {}'.format(created.get('id')))
